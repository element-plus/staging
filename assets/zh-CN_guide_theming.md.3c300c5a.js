import{f as n,o as a,c as s,b as e,g as t,h as p,d as o,e as c}from"./app.784a26ba.js";const l='{"title":"主题","description":"","frontmatter":{"title":"主题"},"headers":[{"level":2,"title":"仅替换主题色","slug":"仅替换主题色"},{"level":3,"title":"在项目中改变 SCSS 变量","slug":"在项目中改变-scss-变量"},{"level":3,"title":"命令行主题工具","slug":"命令行主题工具"},{"level":3,"title":"使用自定义主题","slug":"使用自定义主题"}],"relativePath":"zh-CN/guide/theming.md","lastUpdated":1631848832941}',i={},r={id:"自定义主题-自-1-1-0-beta-1-废弃",tabindex:"-1"},u=o("自定义主题 "),d=o("自 1.1.0-beta.1 废弃"),k=o(),h=e("a",{class:"header-anchor",href:"#自定义主题-自-1-1-0-beta-1-废弃","aria-hidden":"true"},"#",-1),m=c('<p>Element Plus 默认提供一套主题，CSS 命名采用 BEM 的风格，方便使用者覆盖样式。 但是如果 你需要在大规模上替换样式，例如： 将主题颜色从 蓝色改为橙色或绿色，也许一个人将其覆盖起来不是一个好主意。 我们 提供四种方法来改变风格变量。</p><h2 id="仅替换主题色" tabindex="-1">仅替换主题色 <a class="header-anchor" href="#仅替换主题色" aria-hidden="true">#</a></h2><p>如果您只想更改元素的主题颜色，建议使用 <a href="https://element-plus.github.io/theme-chalk-preview/#/en-US" target="_blank" rel="noopener noreferrer">主题预览网站</a> Element Plus 默认的主题色是鲜艳、友好的蓝色。 通过更改它，你 可以使元素加插更多的视觉连接到特定的项目。</p><p>上面的网站允许您实时预览新主题颜色的主题。 并且它可以生成一个基于新主题颜色的完整样式包，让您直接下载 (以便在您的项目中导入新样式文件)。 请参阅 本部分的“导入自定义主题”或“需要时导入组件主题”部分)。</p><h3 id="在项目中改变-scss-变量" tabindex="-1">在项目中改变 SCSS 变量 <a class="header-anchor" href="#在项目中改变-scss-变量" aria-hidden="true">#</a></h3><p><code>主题chalk</code> 被写入SCSS。 如果你的项目也使用 SCSS，你可以直接更改 元素加样式变量。 新建一个样式文件，例如 <code>element-variables.scss</code>，写入以下内容：</p><div class="language-scss"><pre><code><span class="token comment">/* 主题颜色 */</span>\n<span class="token property"><span class="token variable">$--color-primary</span></span><span class="token punctuation">:</span> teal<span class="token punctuation">;</span> <span class="token comment">/* 图标字体路径，必须 */</span>\n<span class="token property"><span class="token variable">$--font-path</span></span><span class="token punctuation">:</span> <span class="token string">&#39;~element-plus/lib/theme-chalk/fonts&#39;</span><span class="token punctuation">;</span>\n<span class="token atrule"><span class="token rule">@importer</span> <span class="token string">&#39;~element-plus/packes/theme-chalk/src/index&#39;</span></span> <span class="token punctuation">;</span>\n</code></pre></div><p>然后在项目的条目文件中，导入此样式文件而不是元素的 生成的 CSS ：</p><div class="language-JS"><pre><code>从 <span class="token string">&#39;vue&#39;</span>\n导入 ElementPlus&#39;\n导入 <span class="token string">&#39;./element-variables.scss&#39;</span>\n从 <span class="token string">&#39;./App.vue&#39;</span> 导入应用；\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请注意，它必须覆盖图标字体路径到 元素的字体文件相对路径。</p></div><h3 id="命令行主题工具" tabindex="-1">命令行主题工具 <a class="header-anchor" href="#命令行主题工具" aria-hidden="true">#</a></h3><p>如果您的项目不使用 SCSS，您可以使用我们的 CLI 主题工具自定义主题：</p><h4 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h4><p>首先在全局或本地安装主题生成器。 推荐使用本地安装，这样可以让你的项目被别人使用时自动安装依赖。</p><div class="language-shell"><pre><code><span class="token function">npm</span> i element-theme -g\n</code></pre></div><p>然后从 npm 或 GitHub 安装 theme-chalk 主题。</p><div class="language-shell"><pre><code><span class="token comment"># 从 npm</span>\n<span class="token function">npm</span> i element-theme-chalk -D\n\n<span class="token comment"># 从 GitHub</span>\n<span class="token function">npm</span> i https://github.com/ElementUI/theme-chalk -D\n</code></pre></div><h4 id="初始化变量文件" tabindex="-1">初始化变量文件 <a class="header-anchor" href="#初始化变量文件" aria-hidden="true">#</a></h4><p>主题生成工具安装成功后，如果全局安装可以在命令行里通过 <code>et</code> 调用工具，如果安装在当前目录下，需要通过 <code>node_modules/.bin/et</code> 访问到命令。 运行 <code>et -i</code> 来初始化输出到 <code>element-variables.scss</code> 的变量文件。 而且您可以随时指定其输出目录。</p><div class="language-shell"><pre><code>et -i <span class="token punctuation">[</span>自定义输出文件<span class="token punctuation">]</span>\n\n<span class="token operator">&gt;</span> :whit_very_check_mark: Generator variables <span class="token function">file</span>\n</code></pre></div><p>在 <code>元素变量.scss</code> 中，您可以找到我们用来样式 Element Plus 的所有变量，并且它们是用SCSS 格式定义的。 这里有一个代码片段:</p><div class="language-css"><pre><code>$<span class="token property">--color-primary</span><span class="token punctuation">:</span> #409EFF !default<span class="token punctuation">;</span>\n$--color-primary <span class="token property">light-1</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">,</span> $--color-main<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span> ！ eault<span class="token punctuation">;</span> <span class="token comment">/* 53a8ff */</span>\n$<span class="token property">--color-primary-light-2</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">,</span> $--color-maine<span class="token punctuation">,</span> 20%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* 66b1ff */</span>\n$<span class="token property">--color-primatif-3</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">,</span> $--color-prim<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span>! eault<span class="token punctuation">;</span> <span class="token comment">/* 79bbff * /\n$--color-primary-light-4：mix(--color-white, $--color-main, 40%) !default; /* 8cc5ff * /\n$--color-primy-light-5：mix(--color-white, $--color-main, 50%)! efault; /* a0cfff * /\n$--color-primary-light-6: mix(--color-white, $--color-main, 60%) ！ eault; /* b3d8ff */</span>\n$<span class="token property">--color-main-light-7</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">,</span> $--color-maine<span class="token punctuation">,</span> 70%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* c6e2ff */</span>\n$--color-primy-light-8：mixit<span class="token punctuation">,</span> $--color-white<span class="token punctuation">,</span> $--color-main<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span>! efault<span class="token punctuation">;</span> <span class="token comment">/* d9ecff * /\n$--color-primary-light-9: mix(--color-white, $--color-main, 90%) ！ eafault; /* ecf5ff */</span>\n\n$<span class="token property">--color-succes</span><span class="token punctuation">:</span> #67c23a !default<span class="token punctuation">;</span>\n$<span class="token property">--color-warning</span><span class="token punctuation">:</span> #e6a23c !default<span class="token punctuation">;</span>\n$<span class="token property">--color-danger</span><span class="token punctuation">:</span> #f56c6c !default<span class="token punctuation">;</span>\n$<span class="token property">--color-info</span><span class="token punctuation">:</span> #909399!default<span class="token punctuation">;</span>\n\n...\n</code></pre></div><h4 id="修改变量" tabindex="-1">修改变量 <a class="header-anchor" href="#修改变量" aria-hidden="true">#</a></h4><p>只需编辑 <code>element-variables.scss</code>, 例如将主题颜色更改为:</p><div class="language-CSS"><pre><code>$--color-primary<span class="token punctuation">;</span>\n</code></pre></div><h4 id="编译主题" tabindex="-1">编译主题 <a class="header-anchor" href="#编译主题" aria-hidden="true">#</a></h4><p>保存变量文件后，使用 <code>et</code> 来构建您的主题。 您可以通过添加参数 <code>-w</code> 激活 <code>监听</code> 模式。 如果您自定义了变量 文件的输出, 您需要添加参数 <code>-c</code> 和变量文件的名称。 自定主题的默认输出位置在 <code>./theme`</code> 文件夹中 您可以使用参数 <code>-o</code> 指定它的 输出目录。</p><div class="language-shell"><pre><code>et\n\n<span class="token operator">&gt;</span> :white_very_check_mark: build theme font\n<span class="token operator">&gt;</span> white_very_check_mark: build element theme\n</code></pre></div><h3 id="使用自定义主题" tabindex="-1">使用自定义主题 <a class="header-anchor" href="#使用自定义主题" aria-hidden="true">#</a></h3><p>我们将涵盖如何在本部分的项目中使用您自定义的主题</p><h4 id="引入自定义主题" tabindex="-1">引入自定义主题 <a class="header-anchor" href="#引入自定义主题" aria-hidden="true">#</a></h4><p>导入您自己的主题就像导入默认主题 仅 这次您导入从“在线主题卷”或“CLI 工具”生成的文件：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;../theme/index.css&#39;</span>\n<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span> \n\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>\n</code></pre></div><h4 id="搭配插件按需引入组件主题" tabindex="-1">搭配插件按需引入组件主题 <a class="header-anchor" href="#搭配插件按需引入组件主题" aria-hidden="true">#</a></h4><p>如果您正在使用 <code>babel插件组件</code> 进行按需导入，只需修改 <code>。 异常</code> 并指定 <code>样式库名称</code> 到您自定义主题的路径 相对于 <code>的路径 异常</code> 注意 <code>~</code> 是必需的：</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&quot;component&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token property">&quot;libraryName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;styleLibraryName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~theme&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果您不熟悉 <code>babel插件组件</code>，请参阅 <a href="/en-US/guide/quickstart.html">Quick Start</a>。 欲了解更多详情，请查看 <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="noopener noreferrer">项目仓库</a> <code>元素主题</code>。</p>',37);i.render=function(o,c,l,i,f,g){const b=n("el-tag");return a(),s("div",null,[e("h1",r,[u,t(b,{type:"error",style:{"vertical-align":"middle"}},{default:p((()=>[d])),_:1}),k,h]),m])};export{l as __pageData,i as default};
