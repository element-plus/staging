import{f as n,o as a,c as s,b as e,g as t,h as p,d as o,e as c}from"./app.018707e7.js";const l='{"title":"テーマ","description":"","frontmatter":{"title":"テーマ"},"headers":[{"level":2,"title":"テーマカラーの変更","slug":"テーマカラーの変更"},{"level":3,"title":"プロジェクト内の SCSS 変数を更新する","slug":"プロジェクト内の-scss-変数を更新する"},{"level":3,"title":"CLI テーマツール","slug":"cli-テーマツール"},{"level":3,"title":"カスタムテーマを使用する","slug":"カスタムテーマを使用する"}],"relativePath":"ja-JP/guide/theming.md","lastUpdated":1631868498008}',r={},i={id:"カスタムテーマ-1-1-0-beta-1以降非推奨です",tabindex:"-1"},u=o("カスタムテーマ "),k=o("1.1.0-beta.1以降非推奨です"),d=o(),m=e("a",{class:"header-anchor",href:"#カスタムテーマ-1-1-0-beta-1以降非推奨です","aria-hidden":"true"},"#",-1),h=c('<p>要素は BEM スタイルの CSS を使用しているので、スタイルを簡単に上書きすることができます。 But if you need to replace styles at a large scale, e.g. change the theme color from blue to orange or green, maybe overriding them one by one is not a good idea. では、スタイル変数を変更する4つの方法を提供します。</p><h2 id="テーマカラーの変更" tabindex="-1">テーマカラーの変更 <a class="header-anchor" href="#テーマカラーの変更" aria-hidden="true">#</a></h2><p>Element Plusのテーマカラーを変更したい場合は、 <a href="https://element-plus.github.io/theme-chalk-preview/#/en-US" target="_blank" rel="noopener noreferrer">テーマプレビューウェブサイト</a> をお勧めします。 Element Plus のテーマカラーは、明るくて親しみやすいブルーです。 これを変更することで、 Element Plus をより視覚的に特定のプロジェクトに接続できるようになります。</p><p>The above website enables you to preview theme of a new theme color in real-time, and it can generate a complete style package based on the new theme color for you to download directly (to import new style files in your project, please refer to the &#39;Import custom theme&#39; or &#39;Import component theme on demand&#39; part of this section).</p><h3 id="プロジェクト内の-scss-変数を更新する" tabindex="-1">プロジェクト内の SCSS 変数を更新する <a class="header-anchor" href="#プロジェクト内の-scss-変数を更新する" aria-hidden="true">#</a></h3><p><code>theme-chalk</code> は SCSS で書かれています。 プロジェクトでも SCSI を使用している場合は、 Element Plus のスタイル変数を直接変更できます。 例えば <code>element-variables.scss</code> のように、新しいスタイルファイルを作成します :</p><div class="language-scss"><pre><code><span class="token comment">/* テーマカラー */</span>\n<span class="token property"><span class="token variable">$--color-primary</span></span><span class="token punctuation">:</span> teal<span class="token punctuation">;</span> <span class="token comment">/* アイコンフォントパス, required */</span>\n<span class="token property"><span class="token variable">$--font-path</span></span><span class="token punctuation">:</span> <span class="token string">&#39;~element-plus/lib/theme-chalk/fonts&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">@import</span> <span class="token string">&#39;~element-plus/packages/theme-chalk/src/index&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>次に、プロジェクトのエントリ ファイルに、エレメントの ビルド CSS の代わりにこのスタイル ファイルをインポートします:</p><div class="language-JS"><pre><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;./element-variables.scss&#39;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&#39;./App.vue&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>アイコンのフォントパスを エレメントのフォントファイルの相対パスに上書きする必要があることに注意してください。</p></div><h3 id="cli-テーマツール" tabindex="-1">CLI テーマツール <a class="header-anchor" href="#cli-テーマツール" aria-hidden="true">#</a></h3><p>プロジェクトで SCSI を使用しない場合は、CLI テーマツールでテーマをカスタマイズできます。</p><h4 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-hidden="true">#</a></h4><p>まず、テーマジェネレータをグローバルまたはローカルにインストールします。 ローカルにインストールすることをお勧めします。 なぜなら、他の人があなたのプロジェクトをクローンしたときに npm が自動的にインストールしてくれるからです。</p><div class="language-shell"><pre><code><span class="token function">npm</span> i element-theme -g\n</code></pre></div><p>次に、npm または GitHub から chalk テーマをインストールします。</p><div class="language-shell"><pre><code><span class="token comment"># from npm</span>\n<span class="token function">npm</span> i element-theme-chalk -D\n\n<span class="token comment"># from GitHub</span>\n<span class="token function">npm</span> i https://github.com/ElementUI/theme-chalk -D\n</code></pre></div><h4 id="変数ファイルの初期化" tabindex="-1">変数ファイルの初期化 <a class="header-anchor" href="#変数ファイルの初期化" aria-hidden="true">#</a></h4><p>After successfully installing the above packages, a command named <code>et</code> is available in CLI (if the packages are installed locally, use <code>node_modules/.bin/et</code> instead). <code>-i</code> を実行して、 <code>element-variables.scss</code> に出力する変数ファイルを初期化します。 また、出力ディレクトリを指定することもできます。</p><div class="language-shell"><pre><code>et -i <span class="token punctuation">[</span>custom output file<span class="token punctuation">]</span>\n\n<span class="token operator">&gt;</span> ✅ Generator variables <span class="token function">file</span>\n</code></pre></div><p><code>element-variables.scss</code> では、 Element Plus のスタイルに使用したすべての変数を見つけることができ、それらは SCSS フォーマットで定義されています。 ここにスニペットがあります。</p><div class="language-css"><pre><code>$<span class="token property">--color-primary</span><span class="token punctuation">:</span> #409EFF !default<span class="token punctuation">;</span>\n$<span class="token property">--color-primary-light-1</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 10%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* 53a8ff */</span>\n$<span class="token property">--color-primary-light-2</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 20%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* 66b1ff */</span>\n$<span class="token property">--color-primary-light-3</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 30%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* 79bbff */</span>\n$<span class="token property">--color-primary-light-4</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 40%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* 8cc5ff */</span>\n$<span class="token property">--color-primary-light-5</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* a0cfff */</span>\n$<span class="token property">--color-primary-light-6</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 60%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* b3d8ff */</span>\n$<span class="token property">--color-primary-light-7</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 70%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* c6e2ff */</span>\n$<span class="token property">--color-primary-light-8</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 80%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* d9ecff */</span>\n$<span class="token property">--color-primary-light-9</span><span class="token punctuation">:</span> <span class="token function">mix</span><span class="token punctuation">(</span>$--color-white<span class="token punctuation">,</span> $--color-primary<span class="token punctuation">,</span> 90%<span class="token punctuation">)</span> !default<span class="token punctuation">;</span> <span class="token comment">/* ecf5ff */</span>\n\n$<span class="token property">--color-success</span><span class="token punctuation">:</span> #67c23a !default<span class="token punctuation">;</span>\n$<span class="token property">--color-warning</span><span class="token punctuation">:</span> #e6a23c !default<span class="token punctuation">;</span>\n$<span class="token property">--color-danger</span><span class="token punctuation">:</span> #f56c6c !default<span class="token punctuation">;</span>\n$<span class="token property">--color-info</span><span class="token punctuation">:</span> #909399 !default<span class="token punctuation">;</span>\n\n...\n</code></pre></div><h4 id="変数の変更" tabindex="-1">変数の変更 <a class="header-anchor" href="#変数の変更" aria-hidden="true">#</a></h4><p><code>element-variables.scss</code>を編集してください。例えば、テーマの色を赤に変更します。</p><div class="language-CSS"><pre><code>$<span class="token property">--color-primary</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n</code></pre></div><h4 id="ビルドテーマ" tabindex="-1">ビルドテーマ <a class="header-anchor" href="#ビルドテーマ" aria-hidden="true">#</a></h4><p>変数ファイルを保存したら、 <code>et</code> を使用してテーマを作成します。 パラメータ -w<code>を追加することで、</code> `` ウォッチを有効にできます。 そして、変数 ファイルの出力をカスタマイズした場合、パラメータ <code>-c</code> と変数ファイルの名前を追加する必要があります。 のデフォルトでは、ビルドテーマファイルは <code>./theme</code> の中に置かれます。 出力ディレクトリは、パラメータ <code>-o</code> で指定できます。</p><div class="language-shell"><pre><code>et\n\n<span class="token operator">&gt;</span> ✅ build theme font\n<span class="token operator">&gt;</span> ✅ build element theme\n</code></pre></div><h3 id="カスタムテーマを使用する" tabindex="-1">カスタムテーマを使用する <a class="header-anchor" href="#カスタムテーマを使用する" aria-hidden="true">#</a></h3><p>このセクションでは、プロジェクトでカスタマイズされたテーマを使用する方法を説明します。</p><h4 id="カスタムテーマをインポートする" tabindex="-1">カスタムテーマをインポートする <a class="header-anchor" href="#カスタムテーマをインポートする" aria-hidden="true">#</a></h4><p>自分のテーマをインポートするのは、デフォルトのテーマをインポートするのと同じです。 今回のみ 「オンラインテーマローラー」または「CLIツール」からビルドされたファイルをインポートします：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;../theme/index.css&#39;</span>\n<span class="token keyword">import</span> ElementPlus <span class="token keyword">from</span> <span class="token string">&#39;element-plus&#39;</span>\n\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementPlus<span class="token punctuation">)</span>\n</code></pre></div><h4 id="コンポーネントテーマをオンデマンドでインポート" tabindex="-1">コンポーネントテーマをオンデマンドでインポート <a class="header-anchor" href="#コンポーネントテーマをオンデマンドでインポート" aria-hidden="true">#</a></h4><p>If you are using <code>babel-plugin-component</code> for on-demand import, just modify <code>.babelrc</code> and specify <code>styleLibraryName</code> to the path where your custom theme is located relative to <code>.babelrc</code>. <code>~</code> が必要です:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;plugins&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">[</span>\n      <span class="token string">&quot;component&quot;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        <span class="token property">&quot;libraryName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;styleLibraryName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~theme&quot;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>babel-plugin-component</code>に慣れていない場合は、 <a href="/en-US/guide/quickstart.html">クイックスタート</a> を参照してください。 詳細は <code>element-theme</code> の <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="noopener noreferrer">project repository</a> を参照してください。</p>',37);r.render=function(o,c,l,r,f,g){const y=n("el-tag");return a(),s("div",null,[e("h1",i,[u,t(y,{type:"error",style:{"vertical-align":"middle"}},{default:p((()=>[k])),_:1}),d,m]),h])};export{l as __pageData,r as default};
