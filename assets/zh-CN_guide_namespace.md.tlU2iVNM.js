import{_ as e}from"./chunks/theme.J5JkHr3A.js";import{c as n,a as s,y as l,X as i,aG as t,o as p}from"./chunks/framework.D_9QPN7t.js";const h=s("h2",{id:"自定义命名空间",tabindex:"-1"},[i("自定义命名空间 "),s("span",{class:"vp-tag"},"2.2.0"),i(),s("a",{class:"header-anchor vp-link",href:"#自定义命名空间","aria-label":'Permalink to "自定义命名空间 ^(2.2.0)"'},"​")],-1),k={class:"tip custom-block"},c=s("p",{class:"custom-block-title"},"TIP",-1),d=i("我们提供了 "),o={href:"https://github.com/element-plus/element-plus-vite-starter",class:"vp-link",target:"_blank",rel:"noreferrer"},r=i("element-plus-vite-starter 模版"),E=i("。 查看代码了解使用方法。"),g=t(`<p>Element Plus 提供的默认命名空间为 <code>el</code>。 在特殊情况下，我们需要自定义命名空间。</p><p>由于我们使用 sass 书写样式，如果您需要自定义所有命名空间， 我们假定用户使用了 sass 书写样式。</p><p>您必须同时设置 <code>ElConfigProvider</code> 和 scss <code>$namespace</code>。</p><h3 id="设置-elconfigprovider" tabindex="-1">设置 <code>ElConfigProvider</code> <a class="header-anchor vp-link" href="#设置-elconfigprovider" aria-label="Permalink to &quot;设置 \`ElConfigProvider\`&quot;">​</a></h3><p>使用 <code>ElConfigProvider</code> 包装您的根组件。</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-config-provider</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ep&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-config-provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="设置-scss-和-css-变量" tabindex="-1">设置 SCSS 和 CSS 变量 <a class="header-anchor vp-link" href="#设置-scss-和-css-变量" aria-label="Permalink to &quot;设置 SCSS 和 CSS 变量&quot;">​</a></h3><p>创建 <code>styles/element/index.scss</code>：</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// styles/element/index.scss</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// we can add this to custom namespace, default is &#39;el&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-plus/theme-chalk/src/mixins/config.scss&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  $namespace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ep&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>在 <code>vite.config.ts</code> 中导入 <code>styles/element/index.scss</code>：</p><blockquote><p>Webpack也是如此，它需要在 <code>preprocessorOptions</code> 中设置。</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineConfig } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  css: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preprocessorOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scss: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        additionalData: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`@use &quot;~/styles/element/index.scss&quot; as *;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>就这么简单。</p>`,13),C=JSON.parse('{"title":"自定义命名空间","description":"","frontmatter":{"title":"自定义命名空间","lang":"zh-CN"},"headers":[{"level":2,"title":"自定义命名空间 <span class=\\"vp-tag \\">2.2.0</span>","slug":"自定义命名空间","link":"#自定义命名空间","children":[{"level":3,"title":"设置 ElConfigProvider","slug":"设置-elconfigprovider","link":"#设置-elconfigprovider","children":[]},{"level":3,"title":"设置 SCSS 和 CSS 变量","slug":"设置-scss-和-css-变量","link":"#设置-scss-和-css-变量","children":[]}]}],"relativePath":"zh-CN/guide/namespace.md","filePath":"zh-CN/guide/namespace.md","lastUpdated":null}'),y={name:"zh-CN/guide/namespace.md"},A=Object.assign(y,{setup(u){return(_,m)=>{const a=e;return p(),n("div",null,[h,s("div",k,[c,s("p",null,[d,s("a",o,[r,l(a,{class:"link-icon"})]),E])]),g])}}});export{C as __pageData,A as default};
